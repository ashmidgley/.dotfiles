{
  "component": {
    "prefix": ["rfc", "component"],
    "description": "Boilerplate for a React functional component",
    "body": "import React, { FC } from 'react'\n\nexport interface I${TM_FILENAME_BASE}Props {}\n\nexport const ${TM_FILENAME_BASE}: FC<I${TM_FILENAME_BASE}Props> = ({}) => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}"
  },
  "story": {
    "prefix": ["sb", "story"],
    "description": "Boilerplate for a Storybook module.",
    "body": "import React from 'react'\nimport { Meta, StoryFn } from '@storybook/react'\n\nexport default {\n\ttitle: 'KX Components/Atoms/${1:Component}',\n\tcomponent: Component,\n\targTypes: {\n\t\tvariant: {\n\t\t\toptions: Object.keys(EComponentVariant),\n\t\t\tcontrol: { type: 'select' },\n\t\t\tdefaultValue: EComponentVariant.solid,\n}\n}\n} as Meta\n\nconst Template: StoryFn<ComponentProps> = (args: ComponentProps) => <Component {...args} />\n\nexport const Default = Template.bind({})\nDefault.args = {}\n"
  },
  "arg-types": {
    "prefix": ["at", "arg-types"],
    "description": "Boilerplate for Storybook Meta Argument Types.",
    "body": "argTypes: {\n\t\tvariant: {\n\t\t\toptions: Object.keys(EComponentVariant),\n\t\t\tcontrol: { type: 'select' },\n\t\t\tdefaultValue: EComponentVariant.solid,\n}\n}"
  },
  "styled-component": {
    "prefix": ["sc", "styled-component"],
    "description": "Boilerplate for a Styled Component.",
    "body": "import styled from 'styled-components'\n\nexport enum EComponentVariant {\n\tsolid = 'solid',\n\toutline = 'outline',\n}\n\nexport const ${1:SComponent} = styled.div<{ variant: EComponentVariant; }>`\n\tdisplay: inline-flex;\n`"
  },
  "test-suite": {
    "prefix": ["ts", "test-suite"],
    "description": "Boilerplate for a suite of React Testing Library tests.",
    "body": "import React from 'react'\nimport { screen, render } from 'test-utils'\nimport { simpleFaker } from '@faker-js/faker'\n\ndescribe('atoms â€º ${1:Component}', () => {\n\ttest('should render the correct value', () => {\n\t\tconst value = simpleFaker.string.alpha(10)\n\t\trender(<Component value={value} />)\n\t\texpect(screen.getByTestId('component')).toHaveTextContent(value)\n\t})\n})"
  },
  "test": {
    "prefix": ["tt", "test"],
    "description": "Boilerplate for a React Testing Library test.",
    "body": "\ttest('should ${1:...}', () => {\n\t\tconst value = simpleFaker.string.alpha(10)\n\t\trender(<Component value={value} />)\n\t\texpect(screen.queryByTestId('component')).toHaveTextContent(value)\n\t\t})"
  },
  "barrel-index": {
    "prefix": ["bi", "bp", "barrel-index"],
    "description": "Boilerplate for a barrel pattern index file.",
    "body": "export * from './${1:Component}'"
  }
}
